设计一种算法，打印 N 皇后在 N × N 棋盘上的各种摆法，其中每个皇后都不同行、不同列，也不在对角线上。这里的“对角线”指的是所有的对角线，不只是平分整个棋盘的那两条对角线。

注意：本题相对原题做了扩展

示例:

 输入：4
 输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
 解释: 4 皇后问题存在如下两个不同的解法。
[
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/eight-queens-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解法：回溯

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        //回溯
        vector<vector<string>> vvs;
        vector<int> vi;
        backtrack(vvs,vi,0,n);
        return vvs;

    }
private:
    void backtrack(vector<vector<string>>& vvs, vector<int>&vi, int a, int n){
        if(a==n){
            vector<string> vs(n,string(n,'.'));
            for(int i=0;i<n;i++)
                vs[i][vi[i]]='Q';
            vvs.push_back(vs);
        }
        else{
            for(int i=0;i<n;i++){
                if(isvalid(vi,i)){

                    vi.push_back(i);
                    backtrack(vvs,vi,a+1,n);
                    vi.pop_back();
                }
            }
        }
    }
    bool isvalid(const vector<int>& vi,int a){
        if(count(vi.begin(),vi.end(),a)) return false;
        int t=1;
        for(int i=vi.size()-1; i>=0;i--){
            if(a==vi[i]+t || a==vi[i]-t) return false;
            t++;
        }
        return true;
    }
};
