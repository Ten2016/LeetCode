在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximal-square
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解法：动态规划
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size()==0||matrix[0].size()==0)
            return 0;
        int m=matrix.size();
        int n=matrix[0].size();
        int ans=0;
        vector<vector<int>> v(m, vector<int>(n));
        for(int i=0; i<m; ++i){
            v[i][0]=matrix[i][0]=='1'?1:0;
            ans=v[i][0]>ans?1:ans;
        }
        for(int i=0; i<n; ++i){
            v[0][i]=matrix[0][i]=='1'?1:0;
            ans=v[0][i]>ans?1:ans;
        }
        for(int i=1; i<m; ++i)
            for(int j=1; j<n; ++j){
                v[i][j]=(matrix[i][j]=='1')?min(min(v[i-1][j],v[i-1][j-1]), v[i][j-1])+1:0;
                ans=v[i][j]>ans?v[i][j]:ans;
            }
        return ans*ans;

    }
};

改进：优化存储空间
