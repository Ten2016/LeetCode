n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。



上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

示例:

输入: 4
输出: [
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/n-queens
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


解法：回溯

class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> vvs;
        vector<int> vi;
        backtrack(vvs,vi,0,n);
        return vvs;
        
    }
private:
    
    void backtrack(vector<vector<string>> &vvs, vector<int> &vi, int row, int n){
        if(row==n){
            vector<string> tmpvs;
            for(int i=0; i<n; i++){
                string tmps(n,'.');
                tmps[vi[i]]='Q';
                tmpvs.push_back(tmps);
            }
            vvs.push_back(tmpvs);
        }
        else{
            for(int col=0;col<n;col++){
                if(isok(vi,row,col)){
                    vi.push_back(col);
                    backtrack(vvs,vi,row+1,n);
                    vi.pop_back();
                }
            }
        }
    }
    bool isok(vector<int> &vi, int row,int col){
        if(row==0) return true;
        for(int i=0; i<row;i++){
            if(vi[i]==col) return false;
        }
        for(int i=row-1,j=1;i>=0;i--,j++){
            if(col==vi[i]+j) return false;
            if(col==vi[i]-j) return false;
        }
        return true;
    }
};