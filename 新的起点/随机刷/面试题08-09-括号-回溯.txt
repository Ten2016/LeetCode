括号。设计一种算法，打印n对括号的所有合法的（例如，开闭一一对应）组合。

说明：解集不能包含重复的子集。

例如，给出 n = 3，生成结果为：

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/bracket-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

解法：回溯

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        //回溯
        vector<string> vs;
        string s("(");
        backtrack(vs,s,1,0,n);
        return vs;

    }
private:
    void backtrack(vector<string>& vs, string &s,int a,int b,int n){
        if(a==n&&b==n) vs.push_back(s);
        else{
            if(isvalid(s,'(',a,b,n)){
                s.push_back('(');
                backtrack(vs,s,a+1,b,n);
                s.pop_back();
            }
            if(isvalid(s,')',a,b,n)){
                s.push_back(')');
                backtrack(vs,s,a,b+1,n);
                s.pop_back();
            }
        }
    }
    bool isvalid(const string& s,char c,int a,int b,int n){
        if(c=='(') a+=1;
        else b+=1;
        return a<=n && b<=a;
    }
};